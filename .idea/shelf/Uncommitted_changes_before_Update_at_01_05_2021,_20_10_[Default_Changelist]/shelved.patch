Index: controller/auth.controller.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const db = require('../db');\nconst crypto = require(\"crypto\");\nconst generateAccessToken = require('../function/generateAccessToken');\n\n//const generateToken = require('../tokenAuth')\n\nconst roles = [\"staff\", \"admin\", \"doctor\", \"hotel_owner\"];\n\nconst badRequest = message => {\n    return {\n        code: \"BadRequest\",\n        message,\n    }\n}\n\nclass authController {\n    async createUser(req, res) {\n        const { first_name, last_name = null, surname, phone_number = \"\", role, password = \"\" } = req.body;\n\n        if (first_name === \"\" || surname === \"\") {\n            return res.status(400).send(badRequest('First name or surname is empty'));\n        }\n\n        const isPhone = phone_number.match(/^\\d{10}$/g);\n        if (!isPhone) return res.status(400).send(badRequest('Invalid phone number'));\n\n        const correctPassword = password.match(/(?=^.{8,}$)((?=.*\\d)(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/);\n        if (!correctPassword) return res.status(400).send(badRequest('Invalid password'));\n\n        const salt = crypto.randomBytes(20).toString('hex');\n        const hashedPassword = crypto.pbkdf2Sync(password, Buffer.from(salt, \"hex\"), 10000, 64, \"sha512\")\n            .toString(\"hex\");\n\n        if (role === \"owner\") {\n            await db.query(\n                'INSERT INTO owner (first_name, last_name, surname, phone_number, salt, hash_password) values ($1, $2, $3, $4, $5, $6) RETURNING *',\n                [first_name, last_name, surname, phone_number, salt, hashedPassword]);\n            res.send(\"владелец добавлен\");\n        } else if (roles.includes(role)) {\n            await db.query(\n                'INSERT INTO staff (first_name, last_name, surname, role, phone_number, salt, hash_password)values ($1, $2, $3, $4, $5) RETURNING *',\n                [first_name, last_name, surname, role, phone_number, salt, hashedPassword]);\n            res.send(\"персонал добавлен\");\n        }\n\t\telse return res.status(400).send(badRequest('Role unknown, please select your role '));\n    }\n\t\n\tasync authorization(req, res) {\n\t\tconst {phone_number, password} = req.body;\n\t\tconst phoneNumberOwnerSQL = await db.query('SELECT FROM owner where phone_number = $1', [phone_number])\n        const phoneNumberStaffSQL = await db.query('SELECT FROM staff where phone_number = $1', [phone_number])\n\n\t\tif (!phoneNumberOwnerSQL.rowCount) {\n            if (!phoneNumberStaffSQL.rowCount) {\n                return res.status(400).send(badRequest('Phone number is not registered'));\n            }\n        }\n\t\tconst {salt, hash_password, id, role = 'owner'} =\n            (await db.query('SELECT * FROM owner where phone_number = $1', [phone_number])).rows[0];\n        const validPassword = crypto.pbkdf2Sync(password, Buffer.from(salt, \"hex\"), 10000, 64, \"sha512\")\n            .toString(\"hex\");\n\t\tif (validPassword !== hash_password) {\n\t\t\treturn res.status(400).send(badRequest('Password is bad'));\n\t\t}\n\t\tconst token = generateAccessToken(id, role);\n\t\treturn res.json({token});\t\t\t\n\t}\n}\n\nmodule.exports = new authController();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controller/auth.controller.js b/controller/auth.controller.js
--- a/controller/auth.controller.js	(revision 257d77244223b745eb31f59b9f8a9ddc126cd414)
+++ b/controller/auth.controller.js	(date 1619888642190)
@@ -55,7 +55,7 @@
                 return res.status(400).send(badRequest('Phone number is not registered'));
             }
         }
-		const {salt, hash_password, id, role = 'owner'} =
+		const {salt, hash_password, id, role = 'owner'} =//todo staff auth
             (await db.query('SELECT * FROM owner where phone_number = $1', [phone_number])).rows[0];
         const validPassword = crypto.pbkdf2Sync(password, Buffer.from(salt, "hex"), 10000, 64, "sha512")
             .toString("hex");
